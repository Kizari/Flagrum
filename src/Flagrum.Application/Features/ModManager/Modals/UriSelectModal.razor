@using Flagrum.Abstractions.AssetExplorer
@using Flagrum.Application.Features.AssetExplorer.Base
@using Flagrum.Application.Features.AssetExplorer.GameView
@using Flagrum.Application.Features.ModManager.Editor
@implements IAssetExplorerParent

@inject AppStateService AppState
@inject IStringLocalizer<UriSelectModal> Localizer
@inject IFileIndex FileIndex

<Modal @ref="Modal" Padding="0" Width="9999" Height="9999" BackgroundClass="bg-grey-900">
    <HeaderView>
        <span class="text-grey-300 flex-grow">@Localizer["BrowseGameAssets"]</span>
        <span class="material-icons cursor-pointer" @onclick="() => Modal.Close()">cancel</span>
    </HeaderView>
    <BodyView>
        <div class="w-full h-full flex flex-col">
            <CascadingValue Value="this">
                <AssetExplorer @ref="AssetExplorer" ItemSelectedOverride="OnItemSelected" ItemFilter="FilterLoose">
                    <AddressBarTemplate>
                        <GameViewAddressBar @ref="AssetExplorer.AddressBar"/>
                    </AddressBarTemplate>
                    <FileListTemplate>
                        <GameViewFileList @ref="AssetExplorer.FileList"/>
                    </FileListTemplate>
                </AssetExplorer>
            </CascadingValue>
        </div>
    </BodyView>
</Modal>

<AlertModal @ref="Alert"/>

@code
{
    private Func<string, Task> _onItemSelected;

    [CascadingParameter] public Editor Parent { get; set; }

    public AssetExplorerView CurrentView { get; set; }

    private Modal Modal { get; set; }
    private AssetExplorer AssetExplorer { get; set; }
    public AlertModal Alert { get; set; }

    private void OnItemSelected(IAssetExplorerNode node)
    {
        _onItemSelected(node.Path);
    }

    private bool FilterLoose(IAssetExplorerNode node) =>
        node.HasChildren || FileIndex.GetArchiveRelativePathByUri(node.Path) != null;

    /// <summary>
    /// Opens the modal.
    /// </summary>
    /// <param name="onItemSelected">
    /// Action to execute when a URI is selected by clicking an item in the asset browser.
    /// Input <c>string</c> is the URI.
    /// </param>
    public void Open(Func<string, Task> onItemSelected)
    {
        _onItemSelected = onItemSelected;
        Modal.Open();
    }

    public void Close()
    {
        Modal.Close();
    }

    public void CallStateHasChanged()
    {
        StateHasChanged();
    }
}