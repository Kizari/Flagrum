@using System.Timers
@using Flagrum.Abstractions.AssetExplorer
@using Flagrum.Application.Features.AssetExplorer.Base
@using Flagrum.Application.Features.AssetExplorer.GameView
@implements IAssetExplorerParent

@inject AppStateService AppState
@inject IStringLocalizer<ModelBrowserModal> Localizer

<Modal @ref="Modal" Padding="0" Width="9999" Height="9999" BackgroundClass="bg-grey-900">
    <HeaderView>
        <span class="text-grey-300 flex-grow">@Localizer["BrowseGameModels"]</span>
        <span class="material-icons cursor-pointer" @onclick="() => Modal.Close()">cancel</span>
    </HeaderView>
    <BodyView>
        <div class="w-full h-full flex flex-col">
            <CascadingValue Value="this">
                <AssetExplorer @ref="AssetExplorer" ItemSelectedOverride="OnItemSelected">
                    <AddressBarTemplate>
                        <GameViewAddressBar @ref="AssetExplorer.AddressBar"/>
                    </AddressBarTemplate>
                    <FileListTemplate>
                        <GameViewFileList @ref="AssetExplorer.FileList"/>
                    </FileListTemplate>
                </AssetExplorer>
            </CascadingValue>
        </div>
    </BodyView>
</Modal>

<AlertModal @ref="Alert"/>

@code
{
    [CascadingParameter] public ModelReplacement Parent { get; set; }

    private Timer _timer;
    private IAssetExplorerNode _currentNode;
    private ModelReplacement.StringWrapper _path;

    private Modal Modal { get; set; }
    private AssetExplorer AssetExplorer { get; set; }
    public AlertModal Alert { get; set; }

    public AssetExplorerView CurrentView { get; set; }
    private string CurrentUri { get; set; }

    private IAssetExplorerNode CurrentNode
    {
        get => _currentNode;
        set
        {
            _currentNode = value;
            CurrentUri = _currentNode.Path;
        }
    }

    public void CallStateHasChanged()
    {
        StateHasChanged();
    }

    private void OnItemSelected(IAssetExplorerNode node)
    {
        if (node.Name.EndsWith(".gmdl"))
        {
            _path.Value = node.Path.Replace("data://", "");
            Modal.Close();
            Parent.CallStateHasChanged();
        }
    }

    public void Open(ModelReplacement.StringWrapper path)
    {
        _path = path;
        Modal.Open();
    }
}