@using Index = Index
@inject IStringLocalizer<Index> Localizer
@inject IStringLocalizer<Preview> PreviewLocalizer
@inject IProfileService Profile
@inject IFileIndex FileIndex

@if (Type == 0)
{
    switch (Item?.Type)
    {
        case ExplorerItemType.Texture:
            <TexturePreview Item="@Item"/>
            break;
        case ExplorerItemType.TerrainTexture:
            <TerrainTexturePreview Item="@Item"/>
            break;
        case ExplorerItemType.Material:
            <MaterialPreview Item="@Item"/>
            break;
        case ExplorerItemType.Xml:
            <XmlPreview Item="@Item"/>
            break;
        case ExplorerItemType.Text:
            <TextPreview Item="@Item"/>
            break;
        case ExplorerItemType.Model:
            <ModelPreview Item="@Item"/>
            break;
        case ExplorerItemType.Archive:
            <ArchivePreview Item="@Item"/>
            break;
        default:
            <div class="flex-grow flex flex-row items-center">
                <div class="mx-auto">
                    <strong class="text-grey-500">
                        @PreviewLocalizer["NoPreview"]
                    </strong>
                </div>
            </div>
            break;
    }
}
else if (Item.HasPropertyView)
{
    <div class="p-6 h-full" style="max-height: 100%; max-width: 100%;">
        <div class="box p-4 h-full overflow-auto">
            <ObjectView Name="@Item.Name" Object="Item.ToObject()" IsExpanded="true"/>
        </div>
    </div>
}
else
{
    <div class="flex-grow flex flex-row items-center">
        <div class="mx-auto">
            <strong class="text-grey-500">
                @PreviewLocalizer["NoPreview"]
            </strong>
        </div>
    </div>
}

@code
{
    [CascadingParameter(Name = "AssetExplorer")]
    public AssetExplorer AssetExplorer { get; set; }

    [Parameter] public int Type { get; set; }

    private IAssetExplorerNode _item;

    public IAssetExplorerNode Item
    {
        get => _item;
        set
        {
            if (_item != value)
            {
                _item = value;

                if (AssetExplorer.Parent.CurrentView == AssetExplorerView.GameView)
                {
                    EarcRelativePath = FileIndex.GetArchiveRelativePathByUri(Item.Path);
                    if (EarcRelativePath != null)
                    {
                        var relativePath = EarcRelativePath.Contains('\\')
                            ? '\\' + EarcRelativePath[..EarcRelativePath.LastIndexOf('\\')]
                            : "";
                        EarcUri = $@"{Profile.GameDataDirectory}{relativePath}";
                    }
                }
            }
        }
    }

    public string EarcRelativePath { get; set; }
    public string EarcUri { get; set; }

    public void SetItem(IAssetExplorerNode node)
    {
        Item = node;
        AssetExplorer.CallStateHasChanged();
    }
}