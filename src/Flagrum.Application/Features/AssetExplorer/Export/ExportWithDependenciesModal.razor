@using System.IO
@using System.Text
@using Flagrum.Core.Archive
@using Flagrum.Core.Graphics.Materials
@using Flagrum.Core.Graphics.Models
@using Flagrum.Core.Graphics.Textures
@using Flagrum.Core.Utilities
@using Flagrum.Application.Features.AssetExplorer.Base
@inject IPlatformService PlatformService
@inject IStringLocalizer<ExportWithDependenciesModal> L
@inject AppStateService AppState
@inject IProfileService Profile
@inject TextureConverter TextureConverter
@inject IFileIndex FileIndex

<Modal @ref="Modal">
    <HeaderView>
        <span class="text-grey-300 flex-grow">@L["ExportWithDependencies"]</span>
        <span class="material-icons cursor-pointer" @onclick="Close">cancel</span>
    </HeaderView>
    <BodyView>
        <div class="h-full">
            <div class="row">
                <label style="width: 250px">@L["TextureFormat"]</label>
                <select @bind="Extension" class="input bg-dark-550 w-full">
                    <option>PNG</option>
                    <option>TGA</option>
                    <option>DDS</option>
                    <option>BTEX</option>
                </select>
            </div>
            <div class="row mt-6">
                <Checkbox IsChecked="@IncludeHighTextures"
                          OnChange="v => { IncludeHighTextures = v; StateHasChanged(); }"/>
                <span class="inline-block ml-2">@L["IncludeHighTextures"]</span>
            </div>
            <div class="row mt-6 mb-10">
                <Checkbox IsChecked="@IncludeCommonTextures"
                          OnChange="v => { IncludeCommonTextures = v; StateHasChanged(); }"/>
                <span class="inline-block ml-2">@L["IncludeSharedTextures"]</span>
            </div>
            <Button Text="@L["Export"]" Icon="file_download" OnClickAsync="Export"/>
        </div>
    </BodyView>
</Modal>

@code
{
    [CascadingParameter(Name = "AssetExplorer")]
    public AssetExplorer Parent { get; set; }

    private Modal Modal { get; set; }
    private string Extension { get; set; } = "PNG";
    private bool IncludeHighTextures { get; set; } = true;
    private bool IncludeCommonTextures { get; set; }
    private IAssetExplorerNode ContextNode { get; set; }

    public void Open(IAssetExplorerNode contextNode)
    {
        ContextNode = contextNode;
        AppState.IsModalOpen = true;
        PlatformService.Set3DViewportVisibility(false);
        Modal.Open();
    }

    private void Close()
    {
        Modal.Close();
        AppState.IsModalOpen = false;

        if (AppState.Is3DViewerOpen)
        {
            PlatformService.Set3DViewportVisibility(true);
        }
    }

    private async Task Export()
    {
        var item = ContextNode;
        var defaultName = item.Name + ".gfxbin";
        const string filter = "Game Model|*.gmdl.gfxbin";

        await PlatformService.OpenSaveFileDialogAsync(defaultName, filter, path =>
        {
            InvokeAsync(() =>
            {
                Parent.SetLoading(true, "Exporting");
                Close();
            });

            // For some reason this ends up with multiple copies of the extension for some people
            // This will ensure all copies are wiped, and then we'll just add ONE set back
            path = path.Replace(".gmdl.gfxbin", "");
            path += ".gmdl.gfxbin";

            var gfxbin = item.Data;
            var model = new GameModel();
            model.Read(gfxbin);

            var materials = new Dictionary<string, byte[]>();
            var highMaterials = new Dictionary<string, byte[]>();
            var textures = new Dictionary<string, byte[]>();
            var highTextures = new Dictionary<string, byte[]>();

            var root = Path.GetDirectoryName(path);
            var materialsDirectory = $"{root}\\materials";
            var texturesDirectory = $"{root}\\sourceimages";
            var highImagesDirectory = $"{root}\\highimages";

            var materialUris = model.Dependencies
                .Where(d => d.Value.EndsWith(".gmtl"))
                .Select(d => d.Value);

            foreach (var uri in materialUris)
            {
                var materialData = AppState.GetFileByUri(uri);
                materials.Add(uri, materialData);

                var material = new GameMaterial();
                material.Read(materialData);

                foreach (var texture in material.Textures.Where(t => !string.IsNullOrEmpty(t.Uri) && !t.Uri.EndsWith(".sb")))
                {
                    if (textures.ContainsKey(texture.Uri) || !CommonCheck(texture.Uri))
                    {
                        continue;
                    }

                    var textureData = AppState.GetFileByUri(texture.Uri);

                    if (textureData.Length > 0)
                    {
                        ConvertTexture(texture.Uri, texturesDirectory, textureData);
                    }
                }

                if (IncludeHighTextures && !string.IsNullOrWhiteSpace(material.HighTexturePackUri))
                {
                    // Process high resolution textures
                    var highTexturePackUri = material.HighTexturePackUri.Replace(".htpk", ".autoext");
                    var highMaterial = ProcessHighTextures(material, highTexturePackUri, texturesDirectory, textures, false);
                    if (highMaterial.Length > 0)
                    {
                        highMaterials.Add(highTexturePackUri, highMaterial);
                    }

                    // Attempt to process 4K texture pack
                    highTexturePackUri = highTexturePackUri.Insert(highTexturePackUri.LastIndexOf('.'), "2");
                    highMaterial = ProcessHighTextures(material, highTexturePackUri, highImagesDirectory, highTextures, true);
                    if (highMaterial.Length > 0)
                    {
                        highMaterials.Add(highTexturePackUri, highMaterial);
                    }
                }
            }

            File.WriteAllBytes(path, gfxbin);

            var gpubinUris = model.Dependencies
                .Where(d => d.Value.EndsWith(".gpubin"))
                .Select(d => d.Value);

            foreach (var gpubinUri in gpubinUris)
            {
                var gpubinData = AppState.GetFileByUri(gpubinUri);
                if (gpubinData.Length > 0)
                {
                    var gpubinPath = $@"{root}\{gpubinUri.Split('/').Last()}";
                    File.WriteAllBytes(gpubinPath, gpubinData);
                }
            }

            foreach (var (uri, data) in materials)
            {
                var materialPath = $"{materialsDirectory}\\{uri.Split('/').Last()}.gfxbin";
                IOHelper.EnsureDirectoriesExistForFilePath(materialPath);
                File.WriteAllBytes(materialPath, data);
            }

            foreach (var (uri, data) in highMaterials)
            {
                var materialPath = $"{materialsDirectory}\\{uri.Split('/').Last()}";
                IOHelper.EnsureDirectoriesExistForFilePath(materialPath);
                File.WriteAllBytes(materialPath, data);
            }

            InvokeAsync(() => Parent.SetLoading(false));
        });
    }

    private byte[] ProcessHighTextures(GameMaterial material, string highTexturePackUri, string directory, Dictionary<string, byte[]> textures, bool is4K)
    {
        byte[] highTexturePack = null;
        if (FileIndex.GetArchiveRelativePathByUri(highTexturePackUri) != null)
        {
            highTexturePack = AppState.GetFileByUri(highTexturePackUri);
        }
        else if (!is4K)
        {
            var archiveRelativePath = material.HighTexturePackUri
                .Replace("data://", "")
                .Replace(".htpk", ".earc")
                .Replace('/', '\\');

            var archivePath = $"{Profile.GameDataDirectory}\\{archiveRelativePath}";

            if (File.Exists(archivePath))
            {
                using var unpacker = new EbonyArchive(archivePath);
                var files = string.Join(' ', unpacker.Files.Select(f => f.Value.Uri));
                highTexturePack = Encoding.UTF8.GetBytes(files);
            }
        }

        if (highTexturePack != null)
        {
            foreach (var highTexture in Encoding.UTF8.GetString(highTexturePack)
                         .Split(' ')
                         .Where(s => !string.IsNullOrWhiteSpace(s))
                         .Select(s =>
                         {
                             var result = s.Trim();
                             if (result.Last() == 0x00)
                             {
                                 result = result[..^1];
                             }

                             return result;
                         }))
            {
                if (textures.ContainsKey(highTexture) || !CommonCheck(highTexture))
                {
                    continue;
                }

                var textureData = AppState.GetFileByUri(highTexture);

                if (textureData.Length > 0)
                {
                    ConvertTexture(highTexture, directory, textureData);
                    textures.Add(highTexture, null);
                }
            }

            return highTexturePack;
        }

        return Array.Empty<byte>();
    }

    private bool CommonCheck(string uri) =>
        IncludeCommonTextures
        || (!uri.StartsWith("data://shader")
            && !uri.StartsWith("data://vfx")
            && !uri.Contains("/common/"));

    private void ConvertTexture(string uri, string directory, byte[] btex)
    {
        var fileName = uri.Split('/').Last();
        fileName = fileName[..fileName.LastIndexOf('.')] + "." + Extension.ToLower();
        var texturePath = $"{directory}\\{fileName}";

        TextureConverter.ExportTexture(texturePath, (ImageFormat)Extension, btex);
    }
}