@using Flagrum.Core.Utilities.Extensions
@using Flagrum.Application.Features.AssetExplorer.Base
@using Flagrum.Application.Features.Settings.Data
@implements IDisposable

@inject IPlatformService PlatformService
@inject JSInterop Interop
@inject AppStateService AppState
@inject IStringLocalizer<App> AppLocalizer
@inject IConfiguration Configuration

<div class="flex flex-row items-center p-2 sticky top-0 z-40 bg-grey-900">
    <span class="material-icons ml-2 mr-2 text-grey-200 text-sm">360</span>
    <span class="text-grey-200 text-sm">
        @{
            var rotateModifierKey = Configuration.Get<ModifierKeys>(StateKey.ViewportRotateModifierKey).ToString();
            var rotateMouseAction = Configuration.Get<MouseAction>(StateKey.ViewportRotateMouseAction).ToString().SpacePascalCase();
        }
        @($"{(rotateModifierKey is null or "None" ? "" : rotateModifierKey + " + ")}{rotateMouseAction}")
    </span>
    <span class="material-icons ml-10 mr-2 text-grey-200 text-sm">pan_tool</span>
    <span class="text-grey-200 flex-grow text-sm">
        @{
            var panModifierKey = Configuration.Get<ModifierKeys>(StateKey.ViewportPanModifierKey).ToString();
            var panMouseAction = Configuration.Get<MouseAction>(StateKey.ViewportPanMouseAction).ToString().SpacePascalCase();
        }
        @($"{(panModifierKey is null or "None" ? "" : panModifierKey + " + ")}{panMouseAction}")
    </span>
    <span
        class="@("material-icons pr-2 text-grey-200 cursor-pointer select-none " + (LodLevel <= 0 || IsLoading ? "invisible" : ""))"
        @onclick="PreviousLod">
        chevron_left
    </span>
    <span class="text-grey-200">LOD @LodLevel / @(LodLevels - 1)</span>
    <span
        class="@("material-icons pl-2 pr-6 text-grey-200 cursor-pointer select-none " + (LodLevel >= LodLevels - 1 || IsLoading ? "invisible" : ""))"
        @onclick="NextLod">
        chevron_right
    </span>
    <Button Icon="settings" Text="@AppLocalizer["Settings"]" OnClick="OpenSettingsModal"
            CssClass="@(IsLoading ? "invisible" : "")"/>
</div>
<div id="viewportContainer" class="h-full bg-grey-700 row">
    @if (IsLoading)
    {
        <div class="flex flex-col items-center w-full">
            <div class="continuous-3"></div>
            <span class="block text-accent1-200 font-display font-bold mt-4 mr-2">Loading Model</span>
        </div>
    }
</div>

<CascadingValue Value="this">
    <ModelPreviewSettingsModal @ref="ModelPreviewSettingsModal"/>
</CascadingValue>

@code
{
    [CascadingParameter] public IAssetExplorerParent Parent { get; set; }

    [Parameter] public IAssetExplorerNode Item { get; set; }

    private IAssetExplorerNode _lastItem;
    private bool _isRendered;
    private bool IsLoading { get; set; }
    private ModelPreviewSettingsModal ModelPreviewSettingsModal { get; set; }
    private int LodLevel { get; set; }
    private int LodLevels { get; set; } = 1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();

            await Interop.ObserveElementResize(DotNetObjectReference.Create(this), "viewportContainer");

            try
            {
                var left = await Interop.GetElementLeftOffset("viewportContainer");
                var top = await Interop.GetElementTopOffset("viewportContainer");
                var width = await Interop.GetElementWidth("viewportContainer");
                var height = await Interop.GetElementHeight("viewportContainer");
                PlatformService.Resize3DViewport((int)left, (int)top, (int)width, (int)height);
            }
            catch
            {
                // See https://github.com/Kizari/Flagrum/issues/33
                // This prevents an edge case, no catch logic is required to continue normal operation
            }

            PlatformService.Set3DViewportVisibility(true);
            LodLevels = PlatformService.ChangeModel(Item, Parent.CurrentView, 0);

            _lastItem = Item;
            _isRendered = true;
            AppState.Is3DViewerOpen = true;

            IsLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_isRendered && Item.Path != _lastItem.Path)
        {
            LodLevel = 0;
            IsLoading = true;
            StateHasChanged();

            PlatformService.Set3DViewportVisibility(false);

            await Task.Run(() => { return InvokeAsync(() => { LodLevels = PlatformService.ChangeModel(Item, Parent.CurrentView, 0); }); });

            PlatformService.Set3DViewportVisibility(true);

            _lastItem = Item;
            IsLoading = false;
            StateHasChanged();
        }
    }

    private Task PreviousLod() => ChangeLod(LodLevel - 1);

    private Task NextLod() => ChangeLod(LodLevel + 1);

    private async Task ChangeLod(int lodLevel)
    {
        IsLoading = true;
        LodLevel = lodLevel;
        StateHasChanged();

        PlatformService.Set3DViewportVisibility(false);

        await Task.Run(() => { return InvokeAsync(() => { PlatformService.ChangeModel(Item, Parent.CurrentView, lodLevel); }); });

        PlatformService.Set3DViewportVisibility(true);

        IsLoading = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnResize(double left, double top, double width, double height)
    {
        PlatformService.Resize3DViewport((int)left, (int)top, (int)width, (int)height);
    }

    public void Dispose()
    {
        PlatformService.Set3DViewportVisibility(false);
        AppState.Is3DViewerOpen = false;
    }

    private void OpenSettingsModal()
    {
        ModelPreviewSettingsModal?.Open();
    }

    public void CallStateHasChanged()
    {
        StateHasChanged();
    }
}